@model Dictionary<string, int> 
@{
    Layout = "_Layout";
    ViewData["Title"] = "Stats";
}
<body>
    <div id="wrapper">

        <section id="inner-headline">
            <div class="container">
                <div class="row">
                    <div class="col-lg-12">
                        <h2 class="pageTitle">EV Stats - Representation of number of EV Stations in each state</h2>
                    </div>
                </div>
            </div>
        </section>
        <section id="content">
            <div class="container">

                <div class="row">
                    <div id="chartdiv"></div>
                </div>
            </div>
        </section>

    </div>

    <style>
        #chartdiv {
            width: 100%;
            height: 500px
        }
    </style>

    <!-- Resources -->
    <script src="https://cdn.amcharts.com/lib/4/core.js"></script>
    <script src="https://cdn.amcharts.com/lib/4/maps.js"></script>
    <script src="https://cdn.amcharts.com/lib/4/geodata/usaLow.js"></script>
    <script src="https://cdn.amcharts.com/lib/4/themes/dataviz.js"></script>
    <script src="https://cdn.amcharts.com/lib/4/themes/animated.js"></script>

    <!-- Chart code -->
    <script>
        am4core.ready(function () {

            // Themes begin
            am4core.useTheme(am4themes_dataviz);
            am4core.useTheme(am4themes_animated);
            // Themes end

            // Create map instance
            var chart = am4core.create("chartdiv", am4maps.MapChart);

            // Set map definition
            chart.geodata = am4geodata_usaLow;

            // Set projection
            chart.projection = new am4maps.projections.AlbersUsa();

            // Create map polygon series
            var polygonSeries = chart.series.push(new am4maps.MapPolygonSeries());

            //Set min/max fill color for each area
            polygonSeries.heatRules.push({
                property: "fill",
                target: polygonSeries.mapPolygons.template,
                min: chart.colors.getIndex(1).brighten(1),
                max: chart.colors.getIndex(1).brighten(-0.3)
            });

            // Make map load polygon data (state shapes and names) from GeoJSON
            polygonSeries.useGeodata = true;

            // Set heatmap values for each state
            polygonSeries.data = [
                {
                    id: "US-AL",
                    value: @(Model.ContainsKey("AL") ? Model["AL"] : 0)
                },
                {
                    id: "US-AK",
                    value: @(Model.ContainsKey("AK") ? Model["AK"] : 0)
                },
                {
                    id: "US-AZ",
                    value: @(Model.ContainsKey("AZ") ? Model["AZ"] : 0)
                },
                {
                    id: "US-AR",
                    value: @(Model.ContainsKey("AR") ? Model["AR"] : 0)
                },
                {
                    id: "US-CA",
                    value: @(Model.ContainsKey("CA") ? Model["CA"] : 0)
                },
                {
                    id: "US-CO",
                    value: @(Model.ContainsKey("CO") ? Model["CO"] : 0)
                },
                {
                    id: "US-CT",
                    value: @(Model.ContainsKey("CT") ? Model["CT"] : 0)
                },
                {
                    id: "US-DE",
                    value: @(Model.ContainsKey("DE") ? Model["DE"] : 0)
                },
                {
                    id: "US-FL",
                    value: @(Model.ContainsKey("FL") ? Model["FL"] : 0)
                },
                {
                    id: "US-GA",
                    value: @(Model.ContainsKey("GA") ? Model["GA"] : 0)
                },
                {
                    id: "US-HI",
                    value: @(Model.ContainsKey("HI") ? Model["HI"] : 0)
                },
                {
                    id: "US-ID",
                    value: @(Model.ContainsKey("ID") ? Model["ID"] : 0)
                },
                {
                    id: "US-IL",
                    value: @(Model.ContainsKey("IL") ? Model["IL"] : 0)
                },
                {
                    id: "US-IN",
                    value: @(Model.ContainsKey("IN") ? Model["IN"] : 0)
                },
                {
                    id: "US-IA",
                    value: @(Model.ContainsKey("IA") ? Model["IA"] : 0)
                },
                {
                    id: "US-KS",
                    value: @(Model.ContainsKey("KS") ? Model["KS"] : 0)
                },
                {
                    id: "US-KY",
                    value: @(Model.ContainsKey("KY") ? Model["KY"] : 0)
                },
                {
                    id: "US-LA",
                    value: @(Model.ContainsKey("LA") ? Model["LA"] : 0)
                },
                {
                    id: "US-ME",
                    value: @(Model.ContainsKey("ME") ? Model["ME"] : 0)
                },
                {
                    id: "US-MD",
                    value: @(Model.ContainsKey("MD") ? Model["MD"] : 0)
                },
                {
                    id: "US-MA",
                    value: @(Model.ContainsKey("MA") ? Model["MA"] : 0)
                },
                {
                    id: "US-MI",
                    value: @(Model.ContainsKey("MI") ? Model["MI"] : 0)
                },
                {
                    id: "US-MN",
                    value: @(Model.ContainsKey("MN") ? Model["MN"] : 0)
                },
                {
                    id: "US-MS",
                    value: @(Model.ContainsKey("MS") ? Model["MS"] : 0)
                },
                {
                    id: "US-MO",
                    value: @(Model.ContainsKey("MO") ? Model["MO"] : 0)
                },
                {
                    id: "US-MT",
                    value: @(Model.ContainsKey("MT") ? Model["MT"] : 0)
                },
                {
                    id: "US-NE",
                    value: @(Model.ContainsKey("NE") ? Model["NE"] : 0)
                },
                {
                    id: "US-NV",
                    value: @(Model.ContainsKey("NV") ? Model["NV"] : 0)
                },
                {
                    id: "US-NH",
                    value: @(Model.ContainsKey("NH") ? Model["NH"] : 0)
                },
                {
                    id: "US-NJ",
                    value: @(Model.ContainsKey("NJ") ? Model["NJ"] : 0)
                },
                {
                    id: "US-NM",
                    value: @(Model.ContainsKey("NM") ? Model["NM"] : 0)
                },
                {
                    id: "US-NY",
                    value: @(Model.ContainsKey("NY") ? Model["NY"] : 0)
                },
                {
                    id: "US-NC",
                    value: @(Model.ContainsKey("NC") ? Model["NC"] : 0)
                },
                {
                    id: "US-ND",
                    value: @(Model.ContainsKey("ND") ? Model["ND"] : 0)
                },
                {
                    id: "US-OH",
                    value: @(Model.ContainsKey("OH") ? Model["OH"] : 0)
                },
                {
                    id: "US-OK",
                    value: @(Model.ContainsKey("OK") ? Model["OK"] : 0)
                },
                {
                    id: "US-OR",
                    value: @(Model.ContainsKey("OR") ? Model["OR"] : 0)
                },
                {
                    id: "US-PA",
                    value: @(Model.ContainsKey("PA") ? Model["PA"] : 0)
                },
                {
                    id: "US-RI",
                    value: @(Model.ContainsKey("RI") ? Model["RI"] : 0)
                },
                {
                    id: "US-SC",
                    value: @(Model.ContainsKey("SC") ? Model["SC"] : 0)
                },
                {
                    id: "US-SD",
                    value: @(Model.ContainsKey("SD") ? Model["SD"] : 0)
                },
                {
                    id: "US-TN",
                    value: @(Model.ContainsKey("TN") ? Model["TN"] : 0)
                },
                {
                    id: "US-TX",
                    value: @(Model.ContainsKey("TX") ? Model["TX"] : 0)
                },
                {
                    id: "US-UT",
                    value: @(Model.ContainsKey("UT") ? Model["UT"] : 0)
                },
                {
                    id: "US-VT",
                    value: @(Model.ContainsKey("VT") ? Model["VT"] : 0)
                },
                {
                    id: "US-VA",
                    value: @(Model.ContainsKey("VA") ? Model["VA"] : 0)
                },
                {
                    id: "US-WA",
                    value: @(Model.ContainsKey("WA") ? Model["WA"] : 0)
                },
                {
                    id: "US-WV",
                    value: @(Model.ContainsKey("WV") ? Model["WV"] : 0)
                },
                {
                    id: "US-WI",
                    value: @(Model.ContainsKey("WI") ? Model["WI"] : 0)
                },
                {
                    id: "US-WY",
                    value: @(Model.ContainsKey("WY") ? Model["WY"] : 0)
                }
            ];

            // Set up heat legend
            let heatLegend = chart.createChild(am4maps.HeatLegend);
            heatLegend.series = polygonSeries;
            heatLegend.align = "right";
            heatLegend.valign = "bottom";
            heatLegend.width = am4core.percent(20);
            heatLegend.marginRight = am4core.percent(4);
            heatLegend.minValue = 0;
            heatLegend.maxValue = 40000000;

            // Set up custom heat map legend labels using axis ranges
            var minRange = heatLegend.valueAxis.axisRanges.create();
            minRange.value = heatLegend.minValue;
            minRange.label.text = "Little";
            var maxRange = heatLegend.valueAxis.axisRanges.create();
            maxRange.value = heatLegend.maxValue;
            maxRange.label.text = "A lot!";

            // Blank out internal heat legend value axis labels
            heatLegend.valueAxis.renderer.labels.template.adapter.add("text", function (labelText) {
                return "";
            });

            // Configure series tooltip
            var polygonTemplate = polygonSeries.mapPolygons.template;
            polygonTemplate.tooltipText = "{name}: {value}";
            polygonTemplate.nonScalingStroke = true;
            polygonTemplate.strokeWidth = 0.5;

            // Create hover state and set alternative fill color
            var hs = polygonTemplate.states.create("hover");
            hs.properties.fill = am4core.color("#3c5bdc");

        }); // end am4core.ready()
    </script>

    <!-- HTML -->

</body>
</html>